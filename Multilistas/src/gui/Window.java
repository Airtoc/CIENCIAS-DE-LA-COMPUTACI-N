package GUI;

import Logic.CourseNode;
import Logic.Lista;
import Logic.StudentNode;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Window extends javax.swing.JFrame {

    private Lista lista;
    DefaultTableModel modelCourse;
    DefaultTableModel modelStudent;

    /**
     * Creates new form Ventana
     */
    public Window() {
        initComponents();
        modelCourse = (DefaultTableModel) coursesTable.getModel();
        modelStudent = (DefaultTableModel) studentsTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        coursesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        studentsTable = new javax.swing.JTable();
        showList = new javax.swing.JButton();
        addCourse = new javax.swing.JButton();
        addStudent = new javax.swing.JButton();
        delStudent = new javax.swing.JButton();
        delCourse = new javax.swing.JButton();
        newList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Multilistas");

        coursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Materias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(coursesTable);

        studentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Estudiante"
            }
        ));
        jScrollPane2.setViewportView(studentsTable);

        showList.setText("Actualizar listas");
        showList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showListActionPerformed(evt);
            }
        });

        addCourse.setText("Añadir Materia");
        addCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseActionPerformed(evt);
            }
        });

        addStudent.setText("Añadir estudiante");
        addStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentActionPerformed(evt);
            }
        });

        delStudent.setText("Eliminar estudiante");
        delStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delStudentActionPerformed(evt);
            }
        });

        delCourse.setText("Eliminar materia");
        delCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCourseActionPerformed(evt);
            }
        });

        newList.setText("Crear Lista");
        newList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(234, 234, 234)
                                .addComponent(newList, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showList)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addCourse)
                                        .addGap(18, 18, 18)
                                        .addComponent(addStudent)
                                        .addGap(18, 18, 18)
                                        .addComponent(delStudent)
                                        .addGap(18, 18, 18)
                                        .addComponent(delCourse))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addComponent(newList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showList)
                    .addComponent(addCourse)
                    .addComponent(addStudent)
                    .addComponent(delStudent)
                    .addComponent(delCourse))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Basicos
    public void eliminar() {

        int rowCount = coursesTable.getRowCount();
        // Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {

            modelCourse.removeRow(i);
        }
    }

    public void eliminarEstudiantes() {

        int rowCount = studentsTable.getRowCount();
        // Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {

            modelStudent.removeRow(i);
        }
    }

    public void imprimir() {
        lista.limpiar();
        lista.mostrarlista(lista.getCabeza());
        ArrayList<String> a = lista.getCursos();
        Object[] fila = new Object[1];
        for (int i = 0; i < a.size(); i++) {
            fila[0] = a.get(i);
            modelCourse.addRow(fila);
        }

    }

    public void imprimirEstudiantes() {
        lista.mostrarEstudiantes(lista.getCourseSelec().getCabezaStudent());
        ArrayList<String> a = lista.getEstudiantes();
        Object[] fila = new Object[1];
        for (int i = 0; i < a.size(); i++) {
            fila[0] = a.get(i);
            modelStudent.addRow(fila);
        }
    }

    //Action Listeners:

    private void showListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showListActionPerformed
        eliminarEstudiantes();
        String materia = JOptionPane.showInputDialog(null, "inserte el nombre de la materia");
        lista.asignarMateria(lista.getCabeza(), materia);
        eliminarEstudiantes();
        imprimirEstudiantes();
    }//GEN-LAST:event_showListActionPerformed

    private void addCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseActionPerformed
        String name = JOptionPane.showInputDialog(null, "inserte el nombre de la materia");
        CourseNode nodo = new CourseNode(name);
        if (lista.getCabeza() == null) {
            // si no hay un nodo inicial , se convierte en el primero
            lista.setCabeza(nodo);
        } else {
            // Añade el nodo
            lista.addMateria(nodo, lista.getCabeza());

        }
        eliminar();
        imprimir();
        JOptionPane.showMessageDialog(null, "Se ha añadido el nodo correctamente");
    }//GEN-LAST:event_addCourseActionPerformed

    private void addStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentActionPerformed
        //Datos basicos
        String name = JOptionPane.showInputDialog(null, "inserte el nombre del estudiante");
        String materia = JOptionPane.showInputDialog(null, "inserte el nombre de la materia");

        //Asignar materia;
        lista.asignarMateria(lista.getCabeza(), materia);

        //Crea el nodo estudiante 
        StudentNode student = new StudentNode(name);

        //Asignacion del estudiante
        if (lista.getCourseSelec().getCabezaStudent() == null) {
            // si no hay un nodo inicial , se convierte en el primero
            lista.getCourseSelec().setCabezaStudent(student);
            
            lista.getCourseSelec().getCabezaStudent().setCabeza(lista.getCourseSelec());
        } else {
            // Añade el nodo
            lista.setInicioEstudiante(lista.getCourseSelec().getCabezaStudent());
            lista.addStudent(student, lista.getCourseSelec().getCabezaStudent());

        }
        eliminar();
        imprimir();
        JOptionPane.showMessageDialog(null, "Se ha añadido el nodo correctamente");

    }//GEN-LAST:event_addStudentActionPerformed

    private void delStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delStudentActionPerformed

        String name = JOptionPane.showInputDialog(null, "inserte el nombre del estudiante");
        String materia = JOptionPane.showInputDialog(null, "inserte el nombre de la materia");

        //Asignar materia;
        lista.asignarMateria(lista.getCabeza(), materia);
        lista.eliminarStudent(lista.getCourseSelec().getCabezaStudent(), name);
        JOptionPane.showMessageDialog(null, "se ha eliminado el estudiante del curso");
        //Imprimir tabla
        eliminarEstudiantes();
        imprimirEstudiantes();
    }//GEN-LAST:event_delStudentActionPerformed

    private void delCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCourseActionPerformed

        String name = JOptionPane.showInputDialog(null, "inserte el nombre de la materia");
        lista.eliminarMateria(lista.getCabeza(), name);
        JOptionPane.showMessageDialog(null, "se ha eliminado la materia correctamente");
        //Imprimir tabla
        eliminar();
        imprimir();
    }//GEN-LAST:event_delCourseActionPerformed

    private void newListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newListActionPerformed
        lista = new Lista();
        JOptionPane.showMessageDialog(null, "Se ha creado una lista vacia");
    }//GEN-LAST:event_newListActionPerformed

    //Main y otras cosas:
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCourse;
    private javax.swing.JButton addStudent;
    private javax.swing.JTable coursesTable;
    private javax.swing.JButton delCourse;
    private javax.swing.JButton delStudent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newList;
    private javax.swing.JButton showList;
    private javax.swing.JTable studentsTable;
    // End of variables declaration//GEN-END:variables
}
